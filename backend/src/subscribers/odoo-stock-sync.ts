import type { SubscriberConfig } from "@medusajs/framework"
import { Modules } from "@medusajs/framework/utils"

/**
 * Subscriber pour synchroniser le stock avec Odoo lors d'√©v√©nements Medusa
 * 
 * TODO: Impl√©menter la synchronisation bi-directionnelle du stock
 * - Lors d'une vente dans Medusa ‚Üí diminuer stock dans Odoo
 * - Lors d'un ajustement de stock dans Medusa ‚Üí mettre √† jour Odoo
 * - Configurer un webhook Odoo ‚Üí mettre √† jour Medusa quand stock change dans Odoo
 */

export default async function odooStockSyncHandler({
  event: { data },
  container,
}: any) {
  console.log("üì¶ [ODOO STOCK] √âv√©nement de stock d√©tect√©:", data)
  
  // TODO: R√©soudre le service Odoo
  // const odooService = container.resolve("odoo")
  
  // TODO: Impl√©menter la logique de synchronisation
  // Exemple:
  // if (data.variantId && data.quantity) {
  //   await odooService.updateStock(data.variantId, data.quantity)
  // }
  
  console.log("‚ö†Ô∏è  [ODOO STOCK] Synchronisation du stock non impl√©ment√©e (TODO)")
}

export const config: SubscriberConfig = {
  event: [
    // √âv√©nements li√©s au stock
    "inventory-item.updated",
    "reservation-item.created",
    // Ajouter d'autres √©v√©nements selon les besoins
  ],
}

