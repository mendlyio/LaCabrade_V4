import type { SubscriberConfig } from "@medusajs/framework"
import { Modules } from "@medusajs/framework/utils"

/**
 * Subscriber pour cr√©er des commandes dans Odoo lors de commandes Medusa
 * 
 * TODO: Impl√©menter la cr√©ation de sale.order dans Odoo
 * - R√©cup√©rer les d√©tails de la commande Medusa
 * - Mapper les donn√©es vers le format Odoo (sale.order + sale.order.line)
 * - Cr√©er la commande dans Odoo via API JSON-RPC
 * - Stocker l'ID Odoo dans metadata de la commande Medusa
 */

export default async function odooOrderSyncHandler({
  event: { data },
  container,
}: any) {
  console.log("üõí [ODOO ORDER] Commande cr√©√©e dans Medusa:", data.id)
  
  // TODO: R√©soudre les services n√©cessaires
  // const odooService = container.resolve("odoo")
  // const orderService = container.resolve(Modules.ORDER)
  
  // TODO: R√©cup√©rer la commande compl√®te
  // const order = await orderService.retrieve(data.id, {
  //   relations: ["items", "items.variant", "shipping_address", "billing_address"]
  // })
  
  // TODO: Mapper et cr√©er dans Odoo
  // const odooOrderData = {
  //   partner_id: ..., // Client Odoo ou cr√©er
  //   order_line: order.items.map(item => [...]),
  //   // ... autres champs
  // }
  // const odooOrderId = await odooService.createOrder(odooOrderData)
  
  // TODO: Sauvegarder l'ID Odoo dans metadata
  // await orderService.update(data.id, {
  //   metadata: { odoo_order_id: odooOrderId }
  // })
  
  console.log("‚ö†Ô∏è  [ODOO ORDER] Cr√©ation de commande Odoo non impl√©ment√©e (TODO)")
}

export const config: SubscriberConfig = {
  event: [
    "order.placed",
    // Ou utiliser "order.completed" selon votre workflow
  ],
}

