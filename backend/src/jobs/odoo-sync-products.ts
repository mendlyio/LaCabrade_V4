import { MedusaContainer } from "@medusajs/framework/types"
import { Modules } from "@medusajs/framework/utils"
import { ODOO_MODULE } from "../modules/odoo"
import OdooModuleService from "../modules/odoo/service"
import { syncFromErpWorkflow } from "../workflows/sync-from-erp"
import { odooSyncCache } from "../lib/odoo-cache"

/**
 * Job planifi√© : Synchronisation automatique des produits modifi√©s dans Odoo
 * S'ex√©cute toutes les 2 heures
 * Compare write_date Odoo vs updated_at Medusa
 */
export default async function odooSyncProductsJob(container: MedusaContainer) {
  console.log(`üîÑ [JOB] D√©marrage synchronisation produits Odoo modifi√©s`)

  try {
    // V√©rifier si Odoo est configur√©
    let odooService: OdooModuleService
    try {
      odooService = container.resolve(ODOO_MODULE)
    } catch (error) {
      console.log(`‚è≠Ô∏è  [JOB] Odoo non configur√©, job ignor√©`)
      return
    }

    const productService = container.resolve(Modules.PRODUCT)

    // R√©cup√©rer tous les produits Medusa avec external_id et leur date de mise √† jour
    const medusaProducts = await productService.listProducts(
      {},
      { 
        select: ["id", "metadata", "updated_at"],
        take: 10000,
      }
    )

    const productsMap = new Map<string, { id: string; updated_at: Date }>()
    medusaProducts.forEach((p: any) => {
      if (p.metadata?.external_id) {
        productsMap.set(p.metadata.external_id, {
          id: p.id,
          updated_at: new Date(p.updated_at),
        })
      }
    })

    if (productsMap.size === 0) {
      console.log(`‚ÑπÔ∏è  [JOB] Aucun produit Odoo trouv√© dans Medusa`)
      return
    }

    console.log(`üì¶ [JOB] ${productsMap.size} produits Odoo dans Medusa`)

    // R√©cup√©rer tous les produits Odoo avec leur date de modification
    const odooProductIds = Array.from(productsMap.keys()).map(id => parseInt(id))
    
    // Appel Odoo pour r√©cup√©rer uniquement les dates de modification
    const odooProductsInfo = await odooService.fetchProductsWithDates(odooProductIds)

    // Filtrer les produits modifi√©s dans Odoo depuis leur derni√®re sync
    const modifiedProductIds: number[] = []
    
    for (const odooProduct of odooProductsInfo) {
      const medusaProduct = productsMap.get(odooProduct.id.toString())
      if (!medusaProduct) continue

      // Comparer les dates (Odoo write_date vs Medusa updated_at)
      const odooDate = new Date(odooProduct.write_date)
      const medusaDate = medusaProduct.updated_at

      // Si Odoo plus r√©cent, ajouter √† la liste
      if (odooDate > medusaDate) {
        console.log(`  üìù Produit ${odooProduct.id} modifi√© dans Odoo: ${odooDate.toISOString()} > ${medusaDate.toISOString()}`)
        modifiedProductIds.push(odooProduct.id)
      }
    }

    if (modifiedProductIds.length === 0) {
      console.log(`‚úÖ [JOB] Aucun produit modifi√© dans Odoo, rien √† synchroniser`)
      return
    }

    console.log(`üîÑ [JOB] ${modifiedProductIds.length} produit(s) √† synchroniser`)

    // Synchroniser les produits modifi√©s par lots de 10
    const BATCH_SIZE = 10
    let totalUpdated = 0
    let totalErrors = 0

    for (let i = 0; i < modifiedProductIds.length; i += BATCH_SIZE) {
      const batch = modifiedProductIds.slice(i, i + BATCH_SIZE)
      const batchNum = Math.floor(i / BATCH_SIZE) + 1
      const totalBatches = Math.ceil(modifiedProductIds.length / BATCH_SIZE)

      console.log(`üì¶ [JOB] Lot ${batchNum}/${totalBatches}: ${batch.length} produits`)

      try {
        const result = await syncFromErpWorkflow(container).run({
          input: {
            limit: 1000,
            offset: 0,
            dryRun: false,
            filterProductIds: batch,
          },
        })

        totalUpdated += result.result.toUpdate || 0
        console.log(`  ‚úÖ ${result.result.toUpdate} produit(s) mis √† jour`)
      } catch (error: any) {
        totalErrors += batch.length
        console.error(`  ‚ùå Erreur lot ${batchNum}:`, error.message)
      }
    }

    // Invalider le cache si des produits ont √©t√© synchronis√©s
    if (totalUpdated > 0) {
      odooSyncCache.invalidate()
      console.log(`üîÑ [CACHE] Cache invalid√©`)
    }

    console.log(`‚úÖ [JOB] Synchronisation termin√©e: ${totalUpdated} mis √† jour, ${totalErrors} erreurs`)
  } catch (error: any) {
    console.error(`‚ùå [JOB] Erreur synchronisation Odoo:`, error.message)
    console.error(error.stack)
  }
}

// Configuration du job : toutes les 2 heures
export const config = {
  name: "odoo-sync-products",
  schedule: "0 */2 * * *", // Toutes les 2 heures √† la minute 0
  // Alternative: "0 0,2,4,6,8,10,12,14,16,18,20,22 * * *" pour √™tre plus explicite
}

